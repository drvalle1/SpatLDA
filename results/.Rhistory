install.packages("INLA",repos=c(getOption("repos"),INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
inla.upgrade() # for the stable version
library('INLA')
inla.upgrade() # for the stable version
rm(list=ls())
library(INLA)
df = data.frame(y = Seeds$r, Ntrials = Seeds$n, Seeds[, 3:5])
plot(df)
hyper1 = list(theta = list(prior="pc.prec", param=c(1,0.01)))
formula1 = y ~ x1 + x2 + f(plate, model="iid", hyper=hyper1)
res1 = inla(formula=formula1, data=df,
family=family1, Ntrials=Ntrials,
control.family=control.family1)
#based on https://haakonbakkagit.github.io/btopic102.html
rm(list=ls())
library(INLA)
df = data.frame(y = Seeds$r, Ntrials = Seeds$n, Seeds[, 3:5])
plot(df)
family1 = "binomial"
control.family1 = list(control.link=list(model="logit"))
# number of trials is df$Ntrials
hyper1 = list(theta = list(prior="pc.prec", param=c(1,0.01)))
formula1 = y ~ x1 + x2 + f(plate, model="iid", hyper=hyper1)
res1 = inla(formula=formula1, data=df,
family=family1, Ntrials=Ntrials,
control.family=control.family1)
summary(res1)
res1$summary.random$plate
summary(res1)
res1$summary.random$plate
m.beta1 = inla.tmarginal(fun = function(x) x, marginal =
res1$marginals.fixed$x1)
# - this transformation is the identity (does nothing)
# - m.beta1 is the marginal for the coefficient in front of the x1 covariate
plot(m.beta1, type="l", xlab = expression(beta[1]), ylab = "Probability density")
plot(res1$marginals.fixed$x1)
m.sigma = inla.tmarginal(fun = function(x) exp(-1/2*x), marginal =
res1$internal.marginals.hyperpar$`Log precision for plate`)
# - m.sigma is the marginal for the standard deviation parameter in the iid random effect
plot(m.sigma, type="l", xlab = expression(sigma[iid]), ylab = "Probability density")
res1$internal.marginals.hyperpar$`Log precision for plate`
k=m.sigma = inla.tmarginal(fun = function(x) exp(-1/2*x), marginal =
res1$internal.marginals.hyperpar$`Log precision for plate`)
# - m.sigma is the marginal for the standard deviation parameter in the iid random effect
plot(m.sigma, type="l", xlab = expression(sigma[iid]), ylab = "Probability density")
k=res1$internal.marginals.hyperpar$`Log precision for plate`
head(k)
dim(k)
df2 = rbind(df, c(NA, 1, 0, 0, 22))
df2
df2 = rbind(df, c(NA, 1, 0, 0, 22))
tail(df2)
res.pred = inla(formula=formula1, data=df2,
family=family1, Ntrials=Ntrials,
control.predictor = list(compute=T, link = 1),
# - to get the posterior of the predictor and fitted values
control.family=control.family1)
res.pred$summary.fitted.values[22, ]
rm(list=ls())
library(INLA); library(sp); library(fields)
library(geoR)
library(viridisLite)
install.packages('geoR')
library(INLA); library(sp); library(fields)
library(geoR)
library(viridisLite)
# - for better colours
options(width=70, digits=2)
data('ca20')
class(ca20)
df = data.frame(y = ca20$data, locx = ca20[[1]][ , 1], locy = ca20[[1]][ , 2], ca20[[3]])
spatial.scaling = 100
df$locx = (df$locx - min(df$locx))/spatial.scaling
df$locy = (df$locy - min(df$locy))/spatial.scaling
df$altitude = df$altitude - mean(df$altitude)
df$y = df$y-50
head(df)
quilt.plot(x=df$locx,y=df$locy,z=df$y,nx=40,ny=40, col = plasma(101),
main = "Data")
?quilt.plot
max.edge = 0.5
mesh <- inla.mesh.2d(
loc=df[ , c('locx', 'locy')],
offset = c(0.5, 1.5),
max.edge=c(max.edge, max.edge*3),
# discretization accuracy
cutoff=max.edge/5)
plot(mesh, asp=1)
points(df[ , c('locx', 'locy')], col='red')
axis(1); axis(2)
A = inla.spde.make.A(mesh=mesh, loc=data.matrix(df[ , c('locx', 'locy')]))
dim(A)
stack <- inla.stack(tag='est',
# - Name (nametag) of the stack
# - Here: est for estimating
data=list(y=df$y),
effects=list(
# - The Model Components
s=1:mesh$n,
# - The "s" is means "spatial"
Xcov=Xcov),
# - The second is all fixed effects
A = list(A, 1)
# - First projector matrix is for 's'
# - second is for 'fixed effects'
)
Xcov = data.frame(intercept=1, altitude=df$altitude)
Xcov = as.matrix(Xcov)
colnames(Xcov)
stack <- inla.stack(tag='est',
# - Name (nametag) of the stack
# - Here: est for estimating
data=list(y=df$y),
effects=list(
# - The Model Components
s=1:mesh$n,
# - The "s" is means "spatial"
Xcov=Xcov),
# - The second is all fixed effects
A = list(A, 1)
# - First projector matrix is for 's'
# - second is for 'fixed effects'
)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
#get functions
setwd('U:\\GIT_models\\SpatLDA\\LdaAbund')
source('gibbs functions.R')
source('LDA abund main func.R')
sourceCpp('aux1.cpp')
setwd('U:\\independent studies\\SpatLDA\\sim1')
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
#get functions
setwd('U:\\independent studies\\SpatLDA\\LdaAbund')
source('gibbs functions.R')
source('LDA abund main func.R')
sourceCpp('aux1.cpp')
setwd('U:\\independent studies\\SpatLDA\\sim1')
dat=read.csv('fake data1.csv',as.is=T)
ind=which(colnames(dat)%in%c('xbin','ybin'))
y=data.matrix(dat[,-ind]); dim(y)
head(y)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
#get functions
setwd('U:\\independent studies\\SpatLDA\\LdaAbund')
source('gibbs functions.R')
source('LDA abund main func.R')
sourceCpp('aux1.cpp')
setwd('U:\\independent studies\\SpatLDA\\sim1')
dat=read.csv('fake data1.csv',as.is=T)
ind=which(colnames(dat)%in%c('xbin','ybin'))
y=data.matrix(dat[,-ind]); dim(y)
ncomm=3
ngibbs=10000
nburn=ngibbs/2
psi=0.1
gamma=0.1
res=LDA.abundance(y=y,ncomm=ncomm,ngibbs=ngibbs,psi=psi,gamma=gamma)
setwd('U:\\independent studies\\SpatLDA\\results LdaAbund')
theta=colMeans(res$theta[seq1,])
theta1=matrix(theta,nrow(y),ncomm)
phi=colMeans(res$phi[seq1,])
phi1=matrix(phi,ncomm,ncol(y))
plot(res$llk,type='l')
seq1=5000:nrow(res$theta)
plot(res$llk[seq1],type='l')
setwd('U:\\independent studies\\SpatLDA\\results LdaAbund')
theta=colMeans(res$theta[seq1,])
theta1=matrix(theta,nrow(y),ncomm)
phi=colMeans(res$phi[seq1,])
phi1=matrix(phi,ncomm,ncol(y))
write.csv(theta1,'theta.csv',row.names=F)
write.csv(phi1,'phi.csv',row.names=F)
rm(list=ls(all=TRUE))
library('gtools')
library('Rcpp')
library('RcppArmadillo')
set.seed(1)
#get functions
setwd('U:\\GIT_models\\SpatLDA')
sourceCpp('SpatLDA_aux.cpp')
source('SpatLDA aux functions.R')
source('SpatLDA_main_func.R')
#get data
setwd('U:\independent studies\SpatLDA\sim1\\fake data')
dat=read.csv('fake data1.csv',as.is=T)
rm(list=ls(all=TRUE))
library('gtools')
library('Rcpp')
library('RcppArmadillo')
set.seed(1)
#get functions
setwd('U:\\GIT_models\\SpatLDA')
sourceCpp('SpatLDA_aux.cpp')
source('SpatLDA aux functions.R')
source('SpatLDA_main_func.R')
#get data
setwd('U:\\GIT_models\\SpatLDA\\fake data')
dat=read.csv('fake data1.csv',as.is=T)
#potential documents
tmp=unique(dat[,c('xbin','ybin')])
coord.plot=data.frame(x=tmp$xbin,y=tmp$ybin)
#useful stuff
nclust=3
ngibbs=10000
nburn=ngibbs/2
#priors
gamma.theta=0.1
gamma.phi=0.1
#run Gibbs sampler
mod=SpatLDA(nclust=nclust,ngibbs=ngibbs,nburn=nburn,
coord.plot=coord.plot,dat=dat,
gamma.theta=gamma.theta,gamma.phi=gamma.phi)
rm(list=ls(all=TRUE))
library('gtools')
library('Rcpp')
library('RcppArmadillo')
set.seed(1)
#get functions
setwd('U:\\GIT_models\\SpatLDA')
sourceCpp('SpatLDA_aux.cpp')
source('SpatLDA aux functions.R')
source('SpatLDA_main_func.R')
#get data
setwd('U:\\GIT_models\\SpatLDA\\fake data')
dat=read.csv('fake data1.csv',as.is=T)
#potential documents
tmp=unique(dat[,c('xbin','ybin')])
coord.plot=data.frame(x=tmp$xbin,y=tmp$ybin)
#useful stuff
nclust=3
ngibbs=3000
nburn=ngibbs/2
#priors
gamma.theta=0.1
gamma.phi=0.1
#run Gibbs sampler
mod=SpatLDA(nclust=nclust,ngibbs=ngibbs,nburn=nburn,
coord.plot=coord.plot,dat=dat,
gamma.theta=gamma.theta,gamma.phi=gamma.phi)
plot(mod$llk,type='l')
plot(mod$sig2,type='l')
plot(mod$llk,type='l')
plot(mod$sig2,type='l')
seq1=seq(from=1000,to=ngibbs,length.out=1000)
plot(mod$llk[seq1],type='l')
plot(mod$sig2[seq1],type='l')
setwd('U:\\GIT_models\\SpatLDA\\results')
nomes=paste0(c('theta','phi','sig2','llk'),' ',by.dist,
'.csv')
write.csv(mod$theta[seq1,],nomes[1],row.names=F)
write.csv(mod$phi[seq1,],  nomes[2],row.names=F)
write.csv(mod$sig2,        nomes[3],row.names=F)
write.csv(mod$llk,         nomes[4],row.names=F)
setwd('U:\\GIT_models\\SpatLDA\\results')
nomes=paste0(c('theta','phi','sig2','llk'),'.csv')
write.csv(mod$theta[seq1,],nomes[1],row.names=F)
write.csv(mod$phi[seq1,],  nomes[2],row.names=F)
write.csv(mod$sig2,        nomes[3],row.names=F)
write.csv(mod$llk,         nomes[4],row.names=F)
rm(list=ls())
#get data
setwd('U:\\GIT_models\\SpatLDA\\fake data')
dat=read.csv('fake data1.csv',as.is=T)
ind=grep('spp',colnames(dat))
nspp=length(ind)
ngrid=nrow(dat)
tmp=unique(dat[,c('xbin','ybin')])
coord.plot=data.frame(x=tmp$xbin,y=tmp$ybin)
nplot=nrow(coord.plot)
nclust=3
setwd('U:\\GIT_models\\SpatLDA')
source('SpatLDA aux functions.R')
setwd('U:\\GIT_models\\SpatLDA\\results')
tmp=read.csv('theta.csv')
theta.estim=matrix(unlist(tmp[nrow(tmp),]),nplot,nclust)
tmp=read.csv('phi.csv')
phi.estim=matrix(unlist(tmp[nrow(tmp),]),nclust,nspp)
tmp=read.csv('sig2.csv')
sig2.estim=tmp$V1[nrow(tmp)]
setwd('U:\\GIT_models\\SpatLDA\\fake data')
phi.true=data.matrix(read.csv('fake data phi.csv'))
#get ordem
fim=matrix(NA,nclust,nclust)
for (i in 1:nclust){
for (j in 1:nclust){
tmp=cbind(phi.true[i,],phi.estim[j,])
fim[i,j]=cor(tmp)[1,2]
}
}
fim
ordem=c(3,2,1)
fim[,ordem]
phi.estim1=phi.estim[ordem,]
rango=range(c(phi.true,phi.estim1))
plot(phi.true,phi.estim1,xlim=rango,ylim=rango)
lines(rango,rango,col='red')
coord=expand.grid(x=seq(from=0,to=1000,by=10),
y=seq(from=0,to=1000,by=10))
ncoord=nrow(coord)
#get distances
nplot=nrow(coord.plot)
dist1=matrix(NA,ncoord,nplot)
for (i in 1:nplot){
x2=(coord$x-coord.plot$x[i])^2
y2=(coord$y-coord.plot$y[i])^2
dist1[,i]=sqrt(x2+y2)
}
#calculate probabilities
res=matrix(NA,ncoord,nclust)
for (i in 1:ncoord){
tmp=exp(-(1/(2*sig2.estim))*dist1[i,])
delta=tmp/sum(tmp)
for (j in 1:nclust){
res[i,j]=sum(theta.estim[,j]*delta)
}
}
res=res[,ordem]
colnames(res)=paste0('c',1:nclust)
res1=as.data.frame(res)
coord1=cbind(coord,res1)
setwd('U:\\GIT_models\\SpatLDA\\results')
write.csv(coord1,'estim proportions.csv',row.names=F)
rm(list=ls())
library('ggplot2')
library(gridExtra)
library(grid)
setwd('U:\\GIT_models\\SpatLDA\\fake data')
true.dat=read.csv('fake data proportions.csv')
setwd('U:\\GIT_models\\SpatLDA\\results')
lda.spat=read.csv('estim proportions.csv')
p1t=ggplot() +
geom_tile(data = true.dat, alpha = 0.8,aes(x = x, y = y,fill = gr1)) +
scale_fill_gradient2(low = "cyan", mid = "red",high='purple',limits=c(0,1),midpoint=0.5) +
theme(legend.position = "none")
p2t=ggplot() +
geom_tile(data = true.dat, alpha = 0.8,aes(x = x, y = y,fill = gr2)) +
scale_fill_gradient2(low = "cyan", mid = "red",high='purple',limits=c(0,1),midpoint=0.5) +
theme(legend.position = "none")
p3t=ggplot() +
geom_tile(data = true.dat, alpha = 0.8,aes(x = x, y = y,fill = gr3)) +
scale_fill_gradient2(low = "cyan", mid = "red",high='purple',limits=c(0,1),midpoint=0.5) +
theme(legend.position = "none")
p1.spat=ggplot() +
geom_tile(data = lda.spat, alpha = 0.8,aes(x = x, y = y,fill = c1)) +
scale_fill_gradient2(low = "cyan", mid = "red",high='purple',limits=c(0,1),midpoint=0.5) +
theme(legend.position = "none")
p2.spat=ggplot() +
geom_tile(data = lda.spat, alpha = 0.8,aes(x = x, y = y,fill = c2)) +
scale_fill_gradient2(low = "cyan", mid = "red",high='purple',limits=c(0,1),midpoint=0.5) +
theme(legend.position = "none")
p3.spat=ggplot() +
geom_tile(data = lda.spat, alpha = 0.8,aes(x = x, y = y,fill = c3)) +
scale_fill_gradient2(low = "cyan", mid = "red",high='purple',limits=c(0,1),midpoint=0.5) +
theme(legend.position = "none")
grid.arrange(p1t, p2t, p3t,
p1.spat,p2.spat,p3.spat,nrow = 2)
rdirichlet
rm(list=ls(all=TRUE))
library('gtools')
library('Rcpp')
library('RcppArmadillo')
set.seed(1)
#get functions
setwd('U:\\GIT_models\\SpatLDA')
sourceCpp('SpatLDA_aux.cpp')
source('SpatLDA aux functions.R')
source('SpatLDA_main_func.R')
#get data
setwd('U:\\GIT_models\\SpatLDA\\fake data')
dat=read.csv('fake data1.csv',as.is=T)
#potential documents
tmp=unique(dat[,c('xbin','ybin')])
coord.plot=data.frame(x=tmp$xbin,y=tmp$ybin)
#useful stuff
nclust=3
ngibbs=3000
nburn=ngibbs/2
#priors
gamma.theta=0.1
gamma.phi=0.1
#run Gibbs sampler
mod=SpatLDA(nclust=nclust,ngibbs=ngibbs,nburn=nburn,
coord.plot=coord.plot,dat=dat,
gamma.theta=gamma.theta,gamma.phi=gamma.phi)
plot(mod$llk,type='l')
plot(mod$sig2,type='l')
seq1=seq(from=1000,to=ngibbs,length.out=1000)
plot(mod$llk[seq1],type='l')
plot(mod$sig2[seq1],type='l')
setwd('U:\\GIT_models\\SpatLDA\\results')
nomes=paste0(c('theta','phi','sig2','llk'),'.csv')
write.csv(mod$theta[seq1,],nomes[1],row.names=F)
write.csv(mod$phi[seq1,],  nomes[2],row.names=F)
write.csv(mod$sig2,        nomes[3],row.names=F)
write.csv(mod$llk,         nomes[4],row.names=F)
rm(list=ls())
#get data
setwd('U:\\GIT_models\\SpatLDA\\fake data')
dat=read.csv('fake data1.csv',as.is=T)
ind=grep('spp',colnames(dat))
nspp=length(ind)
ngrid=nrow(dat)
#potential documents
tmp=unique(dat[,c('xbin','ybin')])
coord.plot=data.frame(x=tmp$xbin,y=tmp$ybin)
nplot=nrow(coord.plot)
nclust=3
#get functions
setwd('U:\\GIT_models\\SpatLDA')
source('SpatLDA aux functions.R')
#get estimated values
setwd('U:\\GIT_models\\SpatLDA\\results')
tmp=read.csv('theta.csv')
theta.estim=matrix(unlist(tmp[nrow(tmp),]),nplot,nclust)
tmp=read.csv('phi.csv')
phi.estim=matrix(unlist(tmp[nrow(tmp),]),nclust,nspp)
tmp=read.csv('sig2.csv')
sig2.estim=tmp$V1[nrow(tmp)]
setwd('U:\\GIT_models\\SpatLDA\\fake data')
phi.true=data.matrix(read.csv('fake data phi.csv'))
#get ordem
fim=matrix(NA,nclust,nclust)
for (i in 1:nclust){
for (j in 1:nclust){
tmp=cbind(phi.true[i,],phi.estim[j,])
fim[i,j]=cor(tmp)[1,2]
}
}
fim
ordem=c(2,1,3)
fim[,ordem]
phi.estim1=phi.estim[ordem,]
rango=range(c(phi.true,phi.estim1))
plot(phi.true,phi.estim1,xlim=rango,ylim=rango)
lines(rango,rango,col='red')
coord=expand.grid(x=seq(from=0,to=1000,by=10),
y=seq(from=0,to=1000,by=10))
ncoord=nrow(coord)
#get distances
nplot=nrow(coord.plot)
dist1=matrix(NA,ncoord,nplot)
for (i in 1:nplot){
x2=(coord$x-coord.plot$x[i])^2
y2=(coord$y-coord.plot$y[i])^2
dist1[,i]=sqrt(x2+y2)
}
#calculate probabilities
res=matrix(NA,ncoord,nclust)
for (i in 1:ncoord){
tmp=exp(-(1/(2*sig2.estim))*dist1[i,])
delta=tmp/sum(tmp)
for (j in 1:nclust){
res[i,j]=sum(theta.estim[,j]*delta)
}
}
#create final data.frame with prob for each cluster
res=res[,ordem]
colnames(res)=paste0('c',1:nclust)
res1=as.data.frame(res)
coord1=cbind(coord,res1)
#export results
setwd('U:\\GIT_models\\SpatLDA\\results')
write.csv(coord1,'estim proportions.csv',row.names=F)
rm(list=ls())
library('ggplot2')
library(gridExtra)
library(grid)
setwd('U:\\GIT_models\\SpatLDA\\fake data')
true.dat=read.csv('fake data proportions.csv')
setwd('U:\\GIT_models\\SpatLDA\\results')
lda.spat=read.csv('estim proportions.csv')
# lda.abund=read.csv('results LdaAbund\\estim proportions.csv')
# lda.agg=read.csv('results agg\\estim proportions.csv')
#plot results
p1t=ggplot() +
geom_tile(data = true.dat, alpha = 0.8,aes(x = x, y = y,fill = gr1)) +
scale_fill_gradient2(low = "cyan", mid = "red",high='purple',limits=c(0,1),midpoint=0.5) +
theme(legend.position = "none")
p2t=ggplot() +
geom_tile(data = true.dat, alpha = 0.8,aes(x = x, y = y,fill = gr2)) +
scale_fill_gradient2(low = "cyan", mid = "red",high='purple',limits=c(0,1),midpoint=0.5) +
theme(legend.position = "none")
p3t=ggplot() +
geom_tile(data = true.dat, alpha = 0.8,aes(x = x, y = y,fill = gr3)) +
scale_fill_gradient2(low = "cyan", mid = "red",high='purple',limits=c(0,1),midpoint=0.5) +
theme(legend.position = "none")
p1.spat=ggplot() +
geom_tile(data = lda.spat, alpha = 0.8,aes(x = x, y = y,fill = c1)) +
scale_fill_gradient2(low = "cyan", mid = "red",high='purple',limits=c(0,1),midpoint=0.5) +
theme(legend.position = "none")
p2.spat=ggplot() +
geom_tile(data = lda.spat, alpha = 0.8,aes(x = x, y = y,fill = c2)) +
scale_fill_gradient2(low = "cyan", mid = "red",high='purple',limits=c(0,1),midpoint=0.5) +
theme(legend.position = "none")
p3.spat=ggplot() +
geom_tile(data = lda.spat, alpha = 0.8,aes(x = x, y = y,fill = c3)) +
scale_fill_gradient2(low = "cyan", mid = "red",high='purple',limits=c(0,1),midpoint=0.5) +
theme(legend.position = "none")
grid.arrange(p1t, p2t, p3t,
p1.spat,p2.spat,p3.spat,nrow = 2)
