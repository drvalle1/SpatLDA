install.packages("INLA",repos=c(getOption("repos"),INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
inla.upgrade() # for the stable version
library('INLA')
inla.upgrade() # for the stable version
rm(list=ls())
library(INLA)
df = data.frame(y = Seeds$r, Ntrials = Seeds$n, Seeds[, 3:5])
plot(df)
hyper1 = list(theta = list(prior="pc.prec", param=c(1,0.01)))
formula1 = y ~ x1 + x2 + f(plate, model="iid", hyper=hyper1)
res1 = inla(formula=formula1, data=df,
family=family1, Ntrials=Ntrials,
control.family=control.family1)
#based on https://haakonbakkagit.github.io/btopic102.html
rm(list=ls())
library(INLA)
df = data.frame(y = Seeds$r, Ntrials = Seeds$n, Seeds[, 3:5])
plot(df)
family1 = "binomial"
control.family1 = list(control.link=list(model="logit"))
# number of trials is df$Ntrials
hyper1 = list(theta = list(prior="pc.prec", param=c(1,0.01)))
formula1 = y ~ x1 + x2 + f(plate, model="iid", hyper=hyper1)
res1 = inla(formula=formula1, data=df,
family=family1, Ntrials=Ntrials,
control.family=control.family1)
summary(res1)
res1$summary.random$plate
summary(res1)
res1$summary.random$plate
m.beta1 = inla.tmarginal(fun = function(x) x, marginal =
res1$marginals.fixed$x1)
# - this transformation is the identity (does nothing)
# - m.beta1 is the marginal for the coefficient in front of the x1 covariate
plot(m.beta1, type="l", xlab = expression(beta[1]), ylab = "Probability density")
plot(res1$marginals.fixed$x1)
m.sigma = inla.tmarginal(fun = function(x) exp(-1/2*x), marginal =
res1$internal.marginals.hyperpar$`Log precision for plate`)
# - m.sigma is the marginal for the standard deviation parameter in the iid random effect
plot(m.sigma, type="l", xlab = expression(sigma[iid]), ylab = "Probability density")
res1$internal.marginals.hyperpar$`Log precision for plate`
k=m.sigma = inla.tmarginal(fun = function(x) exp(-1/2*x), marginal =
res1$internal.marginals.hyperpar$`Log precision for plate`)
# - m.sigma is the marginal for the standard deviation parameter in the iid random effect
plot(m.sigma, type="l", xlab = expression(sigma[iid]), ylab = "Probability density")
k=res1$internal.marginals.hyperpar$`Log precision for plate`
head(k)
dim(k)
df2 = rbind(df, c(NA, 1, 0, 0, 22))
df2
df2 = rbind(df, c(NA, 1, 0, 0, 22))
tail(df2)
res.pred = inla(formula=formula1, data=df2,
family=family1, Ntrials=Ntrials,
control.predictor = list(compute=T, link = 1),
# - to get the posterior of the predictor and fitted values
control.family=control.family1)
res.pred$summary.fitted.values[22, ]
rm(list=ls())
library(INLA); library(sp); library(fields)
library(geoR)
library(viridisLite)
install.packages('geoR')
library(INLA); library(sp); library(fields)
library(geoR)
library(viridisLite)
# - for better colours
options(width=70, digits=2)
data('ca20')
class(ca20)
df = data.frame(y = ca20$data, locx = ca20[[1]][ , 1], locy = ca20[[1]][ , 2], ca20[[3]])
spatial.scaling = 100
df$locx = (df$locx - min(df$locx))/spatial.scaling
df$locy = (df$locy - min(df$locy))/spatial.scaling
df$altitude = df$altitude - mean(df$altitude)
df$y = df$y-50
head(df)
quilt.plot(x=df$locx,y=df$locy,z=df$y,nx=40,ny=40, col = plasma(101),
main = "Data")
?quilt.plot
max.edge = 0.5
mesh <- inla.mesh.2d(
loc=df[ , c('locx', 'locy')],
offset = c(0.5, 1.5),
max.edge=c(max.edge, max.edge*3),
# discretization accuracy
cutoff=max.edge/5)
plot(mesh, asp=1)
points(df[ , c('locx', 'locy')], col='red')
axis(1); axis(2)
A = inla.spde.make.A(mesh=mesh, loc=data.matrix(df[ , c('locx', 'locy')]))
dim(A)
stack <- inla.stack(tag='est',
# - Name (nametag) of the stack
# - Here: est for estimating
data=list(y=df$y),
effects=list(
# - The Model Components
s=1:mesh$n,
# - The "s" is means "spatial"
Xcov=Xcov),
# - The second is all fixed effects
A = list(A, 1)
# - First projector matrix is for 's'
# - second is for 'fixed effects'
)
Xcov = data.frame(intercept=1, altitude=df$altitude)
Xcov = as.matrix(Xcov)
colnames(Xcov)
stack <- inla.stack(tag='est',
# - Name (nametag) of the stack
# - Here: est for estimating
data=list(y=df$y),
effects=list(
# - The Model Components
s=1:mesh$n,
# - The "s" is means "spatial"
Xcov=Xcov),
# - The second is all fixed effects
A = list(A, 1)
# - First projector matrix is for 's'
# - second is for 'fixed effects'
)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
#get functions
setwd('U:\\GIT_models\\SpatLDA\\LdaAbund')
source('gibbs functions.R')
source('LDA abund main func.R')
sourceCpp('aux1.cpp')
setwd('U:\\independent studies\\SpatLDA\\sim1')
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
#get functions
setwd('U:\\independent studies\\SpatLDA\\LdaAbund')
source('gibbs functions.R')
source('LDA abund main func.R')
sourceCpp('aux1.cpp')
setwd('U:\\independent studies\\SpatLDA\\sim1')
dat=read.csv('fake data1.csv',as.is=T)
ind=which(colnames(dat)%in%c('xbin','ybin'))
y=data.matrix(dat[,-ind]); dim(y)
head(y)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
#get functions
setwd('U:\\independent studies\\SpatLDA\\LdaAbund')
source('gibbs functions.R')
source('LDA abund main func.R')
sourceCpp('aux1.cpp')
setwd('U:\\independent studies\\SpatLDA\\sim1')
dat=read.csv('fake data1.csv',as.is=T)
ind=which(colnames(dat)%in%c('xbin','ybin'))
y=data.matrix(dat[,-ind]); dim(y)
ncomm=3
ngibbs=10000
nburn=ngibbs/2
psi=0.1
gamma=0.1
res=LDA.abundance(y=y,ncomm=ncomm,ngibbs=ngibbs,psi=psi,gamma=gamma)
setwd('U:\\independent studies\\SpatLDA\\results LdaAbund')
theta=colMeans(res$theta[seq1,])
theta1=matrix(theta,nrow(y),ncomm)
phi=colMeans(res$phi[seq1,])
phi1=matrix(phi,ncomm,ncol(y))
plot(res$llk,type='l')
seq1=5000:nrow(res$theta)
plot(res$llk[seq1],type='l')
setwd('U:\\independent studies\\SpatLDA\\results LdaAbund')
theta=colMeans(res$theta[seq1,])
theta1=matrix(theta,nrow(y),ncomm)
phi=colMeans(res$phi[seq1,])
phi1=matrix(phi,ncomm,ncol(y))
write.csv(theta1,'theta.csv',row.names=F)
write.csv(phi1,'phi.csv',row.names=F)
rm(list=ls(all=TRUE))
library('gtools')
library('Rcpp')
library('RcppArmadillo')
set.seed(1)
#get functions
setwd('U:\\GIT_models\\SpatLDA')
sourceCpp('SpatLDA_aux.cpp')
source('SpatLDA aux functions.R')
source('SpatLDA_main_func.R')
#get data
setwd('U:\independent studies\SpatLDA\sim1\\fake data')
dat=read.csv('fake data1.csv',as.is=T)
